package com.cartoon.data.chat;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cartoon.data.game.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SECT_CHAT".
*/
public class SectChatDao extends AbstractDao<SectChat, Long> {

    public static final String TABLENAME = "SECT_CHAT";

    /**
     * Properties of entity SectChat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Sect_id = new Property(2, String.class, "sect_id", false, "SECT_ID");
        public final static Property Rank_name = new Property(3, String.class, "rank_name", false, "RANK_NAME");
        public final static Property User_status = new Property(4, String.class, "user_status", false, "USER_STATUS");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Lv_name = new Property(6, String.class, "lv_name", false, "LV_NAME");
    };


    public SectChatDao(DaoConfig config) {
        super(config);
    }
    
    public SectChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SECT_CHAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NICKNAME\" TEXT," + // 1: nickname
                "\"SECT_ID\" TEXT," + // 2: sect_id
                "\"RANK_NAME\" TEXT," + // 3: rank_name
                "\"USER_STATUS\" TEXT," + // 4: user_status
                "\"AVATAR\" TEXT," + // 5: avatar
                "\"LV_NAME\" TEXT);"); // 6: lv_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SECT_CHAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SectChat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String sect_id = entity.getSect_id();
        if (sect_id != null) {
            stmt.bindString(3, sect_id);
        }
 
        String rank_name = entity.getRank_name();
        if (rank_name != null) {
            stmt.bindString(4, rank_name);
        }
 
        String user_status = entity.getUser_status();
        if (user_status != null) {
            stmt.bindString(5, user_status);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String lv_name = entity.getLv_name();
        if (lv_name != null) {
            stmt.bindString(7, lv_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SectChat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String sect_id = entity.getSect_id();
        if (sect_id != null) {
            stmt.bindString(3, sect_id);
        }
 
        String rank_name = entity.getRank_name();
        if (rank_name != null) {
            stmt.bindString(4, rank_name);
        }
 
        String user_status = entity.getUser_status();
        if (user_status != null) {
            stmt.bindString(5, user_status);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String lv_name = entity.getLv_name();
        if (lv_name != null) {
            stmt.bindString(7, lv_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SectChat readEntity(Cursor cursor, int offset) {
        SectChat entity = new SectChat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sect_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rank_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // lv_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SectChat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSect_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRank_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_status(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLv_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SectChat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SectChat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
