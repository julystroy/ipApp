package com.cartoon.data.game;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_GAME".
*/
public class DownloadGameDao extends AbstractDao<DownloadGame, Long> {

    public static final String TABLENAME = "DOWNLOAD_GAME";

    /**
     * Properties of entity DownloadGame.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property CxId = new Property(2, long.class, "cxId", false, "CX_ID");
        public final static Property AppName = new Property(3, String.class, "appName", false, "APP_NAME");
        public final static Property IconUrl = new Property(4, String.class, "iconUrl", false, "ICON_URL");
        public final static Property DownloadUrl = new Property(5, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property Size = new Property(6, String.class, "size", false, "SIZE");
        public final static Property UpdatedAt = new Property(7, long.class, "updatedAt", false, "UPDATED_AT");
        public final static Property CreatedAt = new Property(8, long.class, "createdAt", false, "CREATED_AT");
    };


    public DownloadGameDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadGameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_GAME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PACKAGE_NAME\" TEXT NOT NULL ," + // 1: packageName
                "\"CX_ID\" INTEGER NOT NULL ," + // 2: cxId
                "\"APP_NAME\" TEXT," + // 3: appName
                "\"ICON_URL\" TEXT," + // 4: iconUrl
                "\"DOWNLOAD_URL\" TEXT," + // 5: downloadUrl
                "\"SIZE\" TEXT," + // 6: size
                "\"UPDATED_AT\" INTEGER NOT NULL ," + // 7: updatedAt
                "\"CREATED_AT\" INTEGER NOT NULL );"); // 8: createdAt
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DOWNLOAD_GAME_PACKAGE_NAME_CX_ID_APP_NAME_ICON_URL_DOWNLOAD_URL_SIZE_UPDATED_AT_CREATED_AT ON DOWNLOAD_GAME" +
                " (\"PACKAGE_NAME\" ASC,\"CX_ID\" ASC,\"APP_NAME\" ASC,\"ICON_URL\" ASC,\"DOWNLOAD_URL\" ASC,\"SIZE\" ASC,\"UPDATED_AT\" ASC,\"CREATED_AT\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_GAME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadGame entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPackageName());
        stmt.bindLong(3, entity.getCxId());
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(4, appName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(5, iconUrl);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(6, downloadUrl);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(7, size);
        }
        stmt.bindLong(8, entity.getUpdatedAt());
        stmt.bindLong(9, entity.getCreatedAt());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadGame entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPackageName());
        stmt.bindLong(3, entity.getCxId());
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(4, appName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(5, iconUrl);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(6, downloadUrl);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(7, size);
        }
        stmt.bindLong(8, entity.getUpdatedAt());
        stmt.bindLong(9, entity.getCreatedAt());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadGame readEntity(Cursor cursor, int offset) {
        DownloadGame entity = new DownloadGame( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // packageName
            cursor.getLong(offset + 2), // cxId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // appName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // iconUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // downloadUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // size
            cursor.getLong(offset + 7), // updatedAt
            cursor.getLong(offset + 8) // createdAt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadGame entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.getString(offset + 1));
        entity.setCxId(cursor.getLong(offset + 2));
        entity.setAppName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIconUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDownloadUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSize(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdatedAt(cursor.getLong(offset + 7));
        entity.setCreatedAt(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadGame entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadGame entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
