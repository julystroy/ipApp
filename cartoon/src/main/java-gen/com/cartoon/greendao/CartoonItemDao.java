/*
package com.cartoon.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.cartoon.bean.CartoonItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
*/
/**
 * DAO for table "CARTOON_ITEM".
*//*

public class CartoonItemDao extends AbstractDao<CartoonItem, String> {

    public static final String TABLENAME = "CARTOON_ITEM";

    */
/**
     * Properties of entity CartoonItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    *//*

    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Cartoon_id = new Property(1, String.class, "cartoon_id", false, "CARTOON_ID");
        public final static Property Sort = new Property(2, Integer.class, "sort", false, "SORT");
        public final static Property Remote_connect = new Property(3, String.class, "remote_connect", false, "REMOTE_CONNECT");
        public final static Property Content_pic = new Property(4, String.class, "content_pic", false, "CONTENT_PIC");
    };

    private Query<CartoonItem> cartoonDown_ContentQuery;

    public CartoonItemDao(DaoConfig config) {
        super(config);
    }
    
    public CartoonItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    */
/** Creates the underlying database table. *//*

    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARTOON_ITEM\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CARTOON_ID\" TEXT," + // 1: cartoon_id
                "\"SORT\" INTEGER," + // 2: sort
                "\"REMOTE_CONNECT\" TEXT," + // 3: remote_connect
                "\"CONTENT_PIC\" TEXT);"); // 4: content_pic
    }

    */
/** Drops the underlying database table. *//*

    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARTOON_ITEM\"";
        db.execSQL(sql);
    }

    */
/** @inheritdoc *//*

    @Override
    protected void bindValues(SQLiteStatement stmt, CartoonItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String cartoon_id = entity.getCartoon_id();
        if (cartoon_id != null) {
            stmt.bindString(2, cartoon_id);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(3, sort);
        }
 
        String remote_connect = entity.getRemote_connect();
        if (remote_connect != null) {
            stmt.bindString(4, remote_connect);
        }
 
        String content_pic = entity.getContent_pic();
        if (content_pic != null) {
            stmt.bindString(5, content_pic);
        }
    }

    */
/** @inheritdoc *//*

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    */
/** @inheritdoc *//*

    @Override
    public CartoonItem readEntity(Cursor cursor, int offset) {
        CartoonItem entity = new CartoonItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cartoon_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sort
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remote_connect
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // content_pic
        );
        return entity;
    }
     
    */
/** @inheritdoc *//*

    @Override
    public void readEntity(Cursor cursor, CartoonItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCartoon_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSort(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRemote_connect(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent_pic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    */
/** @inheritdoc *//*

    @Override
    protected String updateKeyAfterInsert(CartoonItem entity, long rowId) {
        return entity.getId();
    }
    
    */
/** @inheritdoc *//*

    @Override
    public String getKey(CartoonItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    */
/** @inheritdoc *//*

    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    */
/** Internal query to resolve the "content" to-many relationship of CartoonDown. *//*

    public List<CartoonItem> _queryCartoonDown_Content(String cartoon_id) {
        synchronized (this) {
            if (cartoonDown_ContentQuery == null) {
                QueryBuilder<CartoonItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Cartoon_id.eq(null));
                cartoonDown_ContentQuery = queryBuilder.build();
            }
        }
        Query<CartoonItem> query = cartoonDown_ContentQuery.forCurrentThread();
        query.setParameter(0, cartoon_id);
        return query.list();
    }

}
*/
