/*
package com.cartoon.bean;

import java.util.List;
import com.cartoon.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.cartoon.greendao.CartoonDownDao;
import com.cartoon.greendao.CartoonItemDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
*/
/**
 * Entity mapped to table "CARTOON_DOWN".
 *//*

public class CartoonDown {

    */
/**
     * 漫画ID
     *//*

    private String id;
    */
/**
     * 漫画标题
     *//*

    private String title;
    */
/**
     * 封面
     *//*

    private String cover_pic;
    */
/**
     * 漫画集数
     *//*

    private String collect;
    */
/**
     * 第几集
     *//*

    private String catalog;

    */
/** Used to resolve relations *//*

    private transient DaoSession daoSession;

    */
/** Used for active entity operations. *//*

    private transient CartoonDownDao myDao;

    private List<CartoonItem> content;
    public void setContent(List<CartoonItem> content) {
        this.content = content;
    }


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CartoonDown() {
    }

    public CartoonDown(String id) {
        this.id = id;
    }

    public CartoonDown(String id, String title, String cover_pic, String collect, String catalog) {
        this.id = id;
        this.title = title;
        this.cover_pic = cover_pic;
        this.collect = collect;
        this.catalog = catalog;
    }

    */
/** called by internal mechanisms, do not call yourself. *//*

    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCartoonDownDao() : null;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getCover_pic() {
        return cover_pic;
    }

    public void setCover_pic(String cover_pic) {
        this.cover_pic = cover_pic;
    }

    public String getCollect() {
        return collect;
    }

    public void setCollect(String collect) {
        this.collect = collect;
    }

    public String getCatalog() {
        return catalog;
    }

    public void setCatalog(String catalog) {
        this.catalog = catalog;
    }

    */
/** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. *//*

    public List<CartoonItem> getContent() {
        if (content == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CartoonItemDao targetDao = daoSession.getCartoonItemDao();
            List<CartoonItem> contentNew = targetDao._queryCartoonDown_Content(id);
            synchronized (this) {
                if(content == null) {
                    content = contentNew;
                }
            }
        }
        return content;
    }

    */
/** Resets a to-many relationship, making the next get call to query for a fresh result. *//*

    public synchronized void resetContent() {
        content = null;
    }

    */
/** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. *//*

    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    */
/** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. *//*

    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    */
/** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. *//*

    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
*/
